services:
  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    expose:
      - &db-port 5432
    hostname: &db-host DBHOSTNAME
    # ports:
      # - 5432:5432
    environment:
      POSTGRES_USER: &db-user user
      POSTGRES_PASSWORD: &db-password drowssap
      POSTGRES_DB: &db-name database

    healthcheck: 
      test: "pg_isready --username=$(printenv POSTGRES_USER) --dbname=$(printenv POSTGRES_DB) && psql --username=$(printenv POSTGRES_USER) --dbname=$(printenv POSTGRES_DB) --list" 
      timeout: 10s 
      retries: 5
      interval: 5s
      start_period: 15s

  rabbit:
    image: rabbitmq:3.13-alpine
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: &rabbit-user rabbit
      RABBITMQ_DEFAULT_PASS: &rabbit-password rabbit
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit log_levels [{connection,error}]"
      RABBITMQ_LOGS: "false"
    hostname: &rabbit-host RABBITHOSTNAME

    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 30s
      start_period: 20s
      retries: 5

  golang-backend:
    build: 
      context: .
      dockerfile: golang-backend.Dockerfile
    ports:
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    hostname: &golang-host golanghost
    environment:
      DB_HOST: *db-host
      DB_USER: *db-user
      DB_PASSWORD: *db-password
      DB_PORT: *db-port
      DB_NAME: *db-name
      DB_URL: postgresql://user:drowssap@DBHOSTNAME:5432/database
      GOLANG_PORT: &golang-port 8080
    command: "./main"

  backend:
    build: 
      context: .
      dockerfile: backend.Dockerfile
    ports: 
      - 3000:3000
      - 5555:5555
    depends_on:
      db:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    environment:
      DB_HOST: *db-host
      DB_USER: *db-user
      DB_PASSWORD: *db-password
      DB_PORT: *db-port
      DB_NAME: *db-name
      DB_URL: postgresql://user:drowssap@DBHOSTNAME:5432/database
      SECRET: yeet
      RABBITMQ_HOST: *rabbit-host
      RABBITMQ_USER: *rabbit-user
      RABBITMQ_PASSWORD: *rabbit-password
      GOLANG_PORT: *golang-port
      GOLANG_ADDR: *golang-host
    hostname: &backend-host backend
    command: /bin/sh -c "pnpm prisma migrate deploy && pnpm prisma studio & pnpm start:todo-hotels"

  auth-backend:
    build: 
      context: .
      dockerfile: microservice.Dockerfile
    ports: 
      - 3001:3000
    depends_on:
      db:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    environment:
      DB_HOST: *db-host
      DB_USER: *db-user
      DB_PASSWORD: *db-password
      DB_PORT: *db-port
      DB_NAME: *db-name
      DB_URL: postgresql://user:drowssap@DBHOSTNAME:5432/database
      SECRET: yeet
      RABBITMQ_HOST: *rabbit-host
      RABBITMQ_USER: *rabbit-user
      RABBITMQ_PASSWORD: *rabbit-password
    hostname: &auth-host auth
    command: "pnpm start:auth"

volumes:
  postgres_data:
