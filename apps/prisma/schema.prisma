generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String       @id @default(cuid())
  email     String    @unique
  password  String
  projects  Project[] @relation("UserProjects")

  @@map("users")
}

model Project {
  id          String       @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation("UserProjects", fields: [userId], references: [id], onDelete: Cascade)
  columns     Column[]  @relation("ProjectColumns")
  taskFields  TaskField[] @relation("ProjectTaskFields")

  @@map("projects")
}

model Column {
  id        String      @id @default(cuid())
  title     String
  order     Int
  projectId String
  project   Project  @relation("ProjectColumns", fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]   @relation("ColumnTasks")

  @@unique([projectId, order])
  @@map("columns")
}

model Task {
  id          String              @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime         @default(now())
  columnId    String
  position  Int 
  column      Column           @relation("ColumnTasks", fields: [columnId], references: [id], onDelete: Cascade)
  taskFields  TaskField[]      @relation("TaskFields")

  @@unique([columnId, position])
  @@map("tasks")
}

model TaskField {
  id                String                @id @default(cuid())
  name              String           
  projectId         String

  type Type
  value String

  taskId String
  project           Project            @relation("ProjectTaskFields", fields: [projectId], references: [id], onDelete: Cascade)
  task              Task               @relation("TaskFields", fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_fields")
}

enum Type {
  string
  number
}